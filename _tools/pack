#!/bin/bash

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

TEMPLATE_FILE="package.json.in"
PACKAGE_FILE="package.json"
OUT_FLAGS="-c -m"
[ "$#" -gt 0 ] && OUT_FLAGS="-b" # Debug
VERBOSE= #"-v"

INPUT_FOLDER="_js"
INPUT_FILE_PATTERN="*.js"
OUTPUT_FILE="assets/js/main.min.js"
OUTPUT_DIR=$(dirname "$OUTPUT_FILE")

generate_package_file() {

    echo "Cleaning output target ${OUTPUT_FILE}"
    rm "${OUTPUT_FILE}" >/dev/null 2>&1
    rm "${PACKAGE_FILE}" >/dev/null 2>&1

    echo "SCRIPT_DIR=${SCRIPT_DIR}"
    echo "INPUT_FOLDER=${INPUT_FOLDER}"
    echo "INPUT_FILE_PATTERNS=${INPUT_FILE_PATTERNS}"
    echo "OUTPUT_FILE=${OUTPUT_FILE}"
    echo "OUTPUT_DIR=${OUTPUT_DIR}"
    echo "WORK_DIR=${WORK_DIR}"
    echo "JS_WORK_DIR=${JS_WORK_DIR}"
    echo ""
    echo "Preparing packaging input from ${JS_WORK_DIR}"

    # Original list was assets/js/vendor/jquery/jquery-3.6.0.js assets/js/plugins/jquery.fitvids.js assets/js/plugins/jquery.greedy-navigation.js assets/js/plugins/jquery.magnific-popup.js assets/js/plugins/jquery.ba-throttle-debounce.js assets/js/plugins/smooth-scroll.js assets/js/plugins/gumshoe.js assets/js/_main.js
    # NOTE: jquery must be the first now, otherwise packing will fail, and _main.js must be the last otherwise runtime lunr errors can occure
    local MATCHING_FILES MATCHING_FILES="${JS_WORK_DIR}/vendor/jquery/jquery-3.6.0.js"

    # NOTE: It seems there might be order dependencies here, using fixed file list instead
    # Order is important here, and is still not yet foolproof as there still might be cross dependencies in a given folder :S
    # `INPUT_FOLDERS`=("plugins" "custom")
    # Do not add lunr as its language support, and other features are handled now during content generation via Liquid
    # EXCLUDE_FILE_PATTERN="*lunr*"
	# for JS_INPUT_FOLDER in "${INPUT_FOLDERS[@]}"; do
    #     MATCHING_FILES="${MATCHING_FILES} $(find "${JS_WORK_DIR}/${JS_INPUT_FOLDER}" -type f \( -name "${INPUT_FILE_PATTERN}" -and -not -name "${EXCLUDE_FILE_PATTERN}" -and -not -name "main.min.js" -and -not -name "_main.js" -and -not -name "jquery-3.6.0.js" \) -exec printf "%s " {} + )"
    # done
    MATCHING_FILES="${MATCHING_FILES} \
                    ${JS_WORK_DIR}/plugins/jquery.ba-throttle-debounce.js \
                    ${JS_WORK_DIR}/plugins/jquery.greedy-navigation.js \
                    ${JS_WORK_DIR}/plugins/jquery.fitvids.js \
                    ${JS_WORK_DIR}/plugins/jquery.magnific-popup.js \
                    ${JS_WORK_DIR}/plugins/gumshoe.js \
                    ${JS_WORK_DIR}/plugins/smooth-scroll.js \
                    ${JS_WORK_DIR}/plugins/clipboard.js \
                    ${JS_WORK_DIR}/custom/copy-to-clipboard-btn.js \
                    ${JS_WORK_DIR}/custom/navigation.js \
                    ${JS_WORK_DIR}/custom/custom-init.js"
    MATCHING_FILES="${MATCHING_FILES} ${JS_WORK_DIR}/_main.js" 
    echo -e "\nMATCHING_FILES to pack ${MATCHING_FILES[@]}"

    local JS_FILES_PATTERN="${JS_WORK_DIR}/**/${INPUT_FILE_PATTERN}"

    sed -e "s|%OUT_FLAGS%|${OUT_FLAGS}|g" \
        -e "s|%JS_FILES%|${MATCHING_FILES}|g" \
        -e "s|%OUT_FILE%|${OUTPUT_FILE}|g" \
        -e "s|%JS_FILES_PATTERN%|${JS_FILES_PATTERN}|g" \
        "${WORK_DIR}/${TEMPLATE_FILE}" > "${WORK_DIR}/${PACKAGE_FILE}"
}

echo ""

# Still there are multiple errors with custom paths
# Absolutely annoying the some many hardcoded requirements, shame.
# Duplicate everything and try to use inplace as it was "designed" to work
#
WORK_DIR=$(mktemp -d)
#open "${WORK_DIR}"

JS_WORK_DIR="${WORK_DIR}/assets/js"
rm -Rf "${JS_WORK_DIR}"
mkdir -p "${JS_WORK_DIR}"

cp -Rf ${VERBOSE} "${INPUT_FOLDER}"/* "${JS_WORK_DIR}"/
cp -Rf ${VERBOSE} "${SCRIPT_DIR}"/* "${WORK_DIR}"/

pushd "${WORK_DIR}" >/dev/null

generate_package_file 

rm -Rf "${WORK_DIR}/node_modules"
npm install

npm run build:js # --prefix "${SCRIPT_DIR}" still bunch of issues

popd >/dev/null

rm -Rf "${OUTPUT_DIR}" >/dev/null 2>&1
mkdir -p "${OUTPUT_DIR}"

# lunr is not included and must be presented for _site generation 
cp -Rf ${VERBOSE} "${INPUT_FOLDER}/lunr" "${OUTPUT_DIR}"
cp -f ${VERBOSE} "${WORK_DIR}/${OUTPUT_FILE}" "${OUTPUT_FILE}"

echo "Output is written to: ${OUTPUT_DIR}"

if [ -d "_site" ]; then
    echo "Updating _site as well as exists"
    SITE_JS_DIR="_site/assets/js"

    # backup lunr, as it is already a generated final _site version
    mv "${SITE_JS_DIR}"/lunr "${WORK_DIR}"

    rm -Rf "${SITE_JS_DIR}" >/dev/null 2>&1
    mkdir -p "${SITE_JS_DIR}"
    cp -f ${VERBOSE} "${OUTPUT_FILE}" "${SITE_JS_DIR}"
    # Add back to the INPUT_FOLDER as well to get the auto reload work in serve
    cp -f ${VERBOSE} "${OUTPUT_FILE}" "${INPUT_FOLDER}"

    # MUST NOT overwrite these in the _site folder, as they have front matter content, so must be re-generated by jekyll instead
    # Just touch the lunr input files for jekyll to trigger the re-gen
    touch "assets/js/lunr/"

    # Put back lunr backup
    mv "${WORK_DIR}"/lunr "${SITE_JS_DIR}"
fi

# FIXME: Add proper error handling above
# if [[ "${WORK_DIR}" != "" ]]; then
#     rm -Rf "${WORK_DIR}"
# fi